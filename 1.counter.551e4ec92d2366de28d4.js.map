{"version":3,"sources":["webpack:///./src/routes/Counter/containers/CounterContainer.js","webpack:///./src/routes/Counter/modules/counter.js","webpack:///./src/routes/Counter/components/Counter.js"],"names":["mapDispatchToProps","increment","doubleAsync","triple","click","mapStateToProps","state","count","counter","clicks","COUNTER_INCREMENT","COUNTER_CLICK","COUNTER_TRIPLE","value","type","payload","dispatch","getState","setTimeout","console","log","actions","countReducer","action","clickReducer","counterReducer","Counter","props","margin","propTypes","PropTypes","number","isRequired","func"],"mappings":"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","file":"1.counter.551e4ec92d2366de28d4.js","sourcesContent":["import { connect } from 'react-redux'\nimport { increment, doubleAsync, triple, click } from '../modules/counter'\n\n/*  This is a container component. Notice it does not contain any JSX,\n    nor does it import React. This component is **only** responsible for\n    wiring in the actions and state necessary to render a presentational\n    component - in this case, the counter:   */\n\nimport Counter from '../components/Counter'\n\n/*  Object of action creators (can also be function that returns object).\n    Keys will be passed as props to presentational components. Here we are\n    implementing our wrapper around increment; the component doesn't care   */\n\nconst mapDispatchToProps = {\n  increment : () => increment(1),\n  doubleAsync,\n  triple : () => triple,\n  click : () => click\n}\n\nconst mapStateToProps = (state) => ({\n  count   : state.counter.count,\n  clicks  : state.counter.clicks\n})\n\n/*  Note: mapStateToProps is where you should use `reselect` to create selectors, ie:\n\n    import { createSelector } from 'reselect'\n    const counter = (state) => state.counter\n    const tripleCount = createSelector(counter, (count) => count * 3)\n    const mapStateToProps = (state) => ({\n      counter: tripleCount(state)\n    })\n\n    Selectors can compute derived data, allowing Redux to store the minimal possible state.\n    Selectors are efficient. A selector is not recomputed unless one of its arguments change.\n    Selectors are composable. They can be used as input to other selectors.\n    https://github.com/reactjs/reselect    */\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter)\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/containers/CounterContainer.js","import { combineReducers } from 'redux'\n\n// ------------------------------------\n// Constants\n// ------------------------------------\nexport const COUNTER_INCREMENT = 'COUNTER_INCREMENT'\nexport const COUNTER_CLICK = 'COUNTER_CLICK'\nexport const COUNTER_TRIPLE = 'COUNTER_TRIPLE'\n\n// ------------------------------------\n// Actions\n// ------------------------------------\nexport function increment (value = 1) {\n  return {\n    type    : COUNTER_INCREMENT,\n    payload : value\n  }\n}\n\nexport const click = {\n  type : COUNTER_CLICK\n}\n\nexport const triple = {\n  type : COUNTER_TRIPLE\n}\n\n/*  This is a thunk, meaning it is a function that immediately\n    returns a function for lazy evaluation. It is incredibly useful for\n    creating async actions, especially when combined with redux-thunk!\n\n    NOTE: This is solely for demonstration purposes. In a real application,\n    you'd probably want to dispatch an action of COUNTER_DOUBLE and let the\n    reducer take care of this logic.  */\n\nexport const doubleAsync = () => {\n  return (dispatch, getState) => {\n    setTimeout(() => {\n      dispatch(increment(getState().counter.count))\n      console.log('hi')\n    }, 200)\n  }\n}\n\nexport const actions = {\n  increment,\n  click,\n  doubleAsync,\n  triple\n}\n\n// ------------------------------------\n// Action Handlers\n// ------------------------------------\n// const ACTION_HANDLERS = {\n//   [COUNTER_INCREMENT] : (state, action) => state + action.payload,\n//   [COUNTER_CLICK]     : (state, action) => state + action.payload\n// }\n\n// ------------------------------------\n// Reducer\n// ------------------------------------\nfunction countReducer (state = 0, action) {\n  switch (action.type) {\n    case COUNTER_INCREMENT: return state + action.payload\n    case COUNTER_TRIPLE: return state * 3\n    default: return state\n  }\n}\n\nfunction clickReducer (state = 0, action) {\n  switch (action.type) {\n    case COUNTER_CLICK: return state + 1\n    default: return state\n  }\n}\n\nconst counterReducer = combineReducers({\n  count: countReducer,\n  clicks: clickReducer\n})\n\nexport default counterReducer\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/modules/counter.js","import React from 'react'\n\nexport const Counter = (props) => (\n  <div style={{ margin: '0 auto' }} >\n    <h2>Counter: {props.count}, Clicks: {props.clicks}</h2>\n    <button className='btn btn-default' onClick={() => {\n      props.increment()\n      props.click()\n    }}>\n      Increment\n    </button>\n    {' '}\n    <button className='btn btn-default' onClick={() => {\n      props.doubleAsync()\n      props.click()\n    }}>\n      Double (Async)\n    </button>\n    {' '}\n    <button className='btn btn-default' onClick={() => {\n      props.triple()\n      props.click()\n    }}>\n      Triple\n    </button>\n  </div>\n)\n\nCounter.propTypes = {\n  count       : React.PropTypes.number.isRequired,\n  clicks      : React.PropTypes.number.isRequired,\n  doubleAsync : React.PropTypes.func.isRequired,\n  increment   : React.PropTypes.func.isRequired,\n  click       : React.PropTypes.func.isRequired,\n  triple       : React.PropTypes.func.isRequired\n}\n\nexport default Counter\n\n\n\n// WEBPACK FOOTER //\n// ./src/routes/Counter/components/Counter.js"],"sourceRoot":""}